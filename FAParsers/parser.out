Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> SAY expression
Rule 2     expression -> expression STRING
Rule 3     expression -> STRING

Terminals, with rules where they appear

SAY                  : 1
STRING               : 2 3
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . SAY expression
    (2) expression -> . expression STRING
    (3) expression -> . STRING

    SAY             shift and go to state 1
    STRING          shift and go to state 2

    expression                     shift and go to state 3

state 1

    (1) expression -> SAY . expression
    (1) expression -> . SAY expression
    (2) expression -> . expression STRING
    (3) expression -> . STRING

    SAY             shift and go to state 1
    STRING          shift and go to state 2

    expression                     shift and go to state 4

state 2

    (3) expression -> STRING .

    STRING          reduce using rule 3 (expression -> STRING .)
    $end            reduce using rule 3 (expression -> STRING .)


state 3

    (0) S' -> expression .
    (2) expression -> expression . STRING

    STRING          shift and go to state 5


state 4

    (1) expression -> SAY expression .
    (2) expression -> expression . STRING

    $end            reduce using rule 1 (expression -> SAY expression .)
    STRING          shift and go to state 5

  ! STRING          [ reduce using rule 1 (expression -> SAY expression .) ]


state 5

    (2) expression -> expression STRING .

    STRING          reduce using rule 2 (expression -> expression STRING .)
    $end            reduce using rule 2 (expression -> expression STRING .)

