# November 4, 2012
#  
#  This document should contain the design goals for this project.
#

1.00 User Experience
1.10 View Geometry 
1.20 Roguelike Traits
1.30 Map and World
1.40 Crafting Traits
1.50 Dynamic Environment
1.60 Database Connectivity
1.70 Multiplayer World    

# 1.00 User Experience

## 1.10 View Geometry
     For a curses-based program, a two or three pane layout may be best.
   One pane could be designated primarily for user input, another for
   'rendered' game/ascii art, and perhaps a third for user status.

     CmdLineView offers an echo for user typed-strings. It also triggers
   InputEvents, whose data is the typed strings. It provides a few lines
   for displaying current and previous user input. I couldn't get
   scrolling in the other direction to work.

     StatusView is an area of lines for displaying information about the
   player as well as application responses/logging.

     WorldView is the main area for 'rending' the game world. (Contains MapView?)

2.00 Code Design
2.10 Visuals Engine
2.20 MVC Decomposition
2.30 Event Passing
2.40 Testing

# 2.00 Code Design
  Buzzwords:
    MVC-style decomposition.
    Messenging/Event System.

## 2.10 Visuals Engine
    The end goal doesn't need to be text-only terminal support, but
  using a lightweight curses-based user-interface would speed dev
  time and also increase the fun/time ratio.

    Later on, once the application has matured or more power is needed,
  pygame can be used or some other package. The user input (curses) and 
  graphics output (curses) dealing classes should be written in a manner
  that will later easily abstract to a generic graphics layer for the
  game, thereby supporting multiple graphics options.

## 2.20 MVC Decomposition
   - Models are given. Store model data, no view contamination.
   But logic is ok if placed right? Models communicate only through
   event notification.

   - Collections are integral. A base collection object does a lot
   of the heavy lifting. Collections pass events.

   - Views store no model data. They often are listening for events.

   - Controllers are usually singletons that juggle the object instances.
   They can also perform heavy logic, or communicate to storage/databases.

## 2.30 Event Passing
   - Collections have a notify(event) method which calls .notify(event) on
   all the collection's members. Hence you must have a .notify to join the
   collection.

## 2.40 Testing
    Testing should be used on every class in the game. As many methods as
  possible should be tested for each class. To make things easy, the python
  unittest module will be used.

    If the class Class is stored in Class.py, Class_test.py should contain
  the relevant unit test code (using unittest). Then, to run all the tests
  in a directory, one can run `python -m unittest *.py`.
